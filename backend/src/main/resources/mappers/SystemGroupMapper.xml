<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.master.gallywix.mapper.SystemGroupMapper">

    <select id="getGroupList" resultType="cn.master.gallywix.dto.GroupDTO">
        SELECT *,
        (SELECT COUNT(DISTINCT ug.user_id) FROM tb_user_group ug JOIN tb_system_user ON ug.user_id = tb_system_user.id
        WHERE ug.group_id =
        temp.id) AS memberSize
        FROM (
        SELECT g.*, w.name AS scopeName FROM `tb_system_group` g join tb_system_workspace w on g.scope_id = w.id
        ${qwSql}
        UNION DISTINCT
        SELECT g.*, 'global' AS scopeName FROM `tb_system_group` g
        <where>
            g.scope_id = 'global'
            <if test="types != null and types.size() > 0">
                AND g.type IN
                <foreach collection="types" item="type" separator="," open="(" close=")">
                    #{type}
                </foreach>
            </if>
        </where>
        UNION DISTINCT
        SELECT g.*, 'system' AS scopeName FROM `tb_system_group` g
        <where>
            g.scope_id = 'system'
            <if test="types != null and types.size() > 0">
                AND g.type IN
                <foreach collection="types" item="type" separator="," open="(" close=")">
                    #{type}
                </foreach>
            </if>
        </where>
        union distinct
        select g.*, p.name as scopeName from `tb_system_group` g join tb_system_project p on g.scope_id = p.id
        ${qwSql}
        limit ${pageOffset}, ${pageSize}) temp
        <if test="name != null and name!=''">
            WHERE temp.name LIKE CONCAT('%', #{name},'%')
        </if>
        <if test="orders == null or orders.size() == 0">
            ORDER BY field(temp.type, 'SYSTEM', 'WORKSPACE', 'PROJECT'),
            field(temp.scope_id, 'system') desc,
            temp.update_time, temp.name
        </if>
        <if test="orders != null and orders.size() > 0">
            ORDER BY
            <foreach collection="orders" separator="," item="order">
                temp.${order.name} ${order.type}, temp.name DESC
            </foreach>
        </if>
    </select>

    <select id="getGroupList_COUNT" resultType="long">
        select count(*) from (
        SELECT *,
        (SELECT COUNT(DISTINCT ug.user_id) FROM tb_user_group ug JOIN tb_system_user ON ug.user_id = tb_system_user.id WHERE ug.group_id =
        temp.id) AS memberSize
        FROM (
        SELECT g.*, w.name AS scopeName FROM `tb_system_group` g join tb_system_workspace w on g.scope_id = w.id
        ${qwSql}
        UNION DISTINCT
        SELECT g.*, 'global' AS scopeName FROM `tb_system_group` g
        <where>
            g.scope_id = 'global'
            <if test="types != null and types.size() > 0">
                AND g.type IN
                <foreach collection="types" item="type" separator="," open="(" close=")">
                    #{type}
                </foreach>
            </if>
        </where>
        UNION DISTINCT
        SELECT g.*, 'system' AS scopeName FROM `tb_system_group` g
        <where>
            g.scope_id = 'system'
            <if test="types != null and types.size() > 0">
                AND g.type IN
                <foreach collection="types" item="type" separator="," open="(" close=")">
                    #{type}
                </foreach>
            </if>
        </where>
        union distinct
        select g.*, p.name as scopeName from `tb_system_group` g join tb_system_project p on g.scope_id = p.id
        ${qwSql}
        limit ${pageOffset}, ${pageSize}) temp
        <if test="name != null and name!=''">
            WHERE temp.name LIKE CONCAT('%', #{name},'%')
        </if>
        <if test="orders == null or orders.size() == 0">
            ORDER BY field(temp.type, 'SYSTEM', 'WORKSPACE', 'PROJECT'),
            field(temp.scope_id, 'system') desc,
            temp.update_time, temp.name
        </if>
        <if test="orders != null and orders.size() > 0">
            ORDER BY
            <foreach collection="orders" separator="," item="order">
                temp.${order.name} ${order.type}, temp.name DESC
            </foreach>
        </if>) a
    </select>
</mapper>
